<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Editor/EditorUtils.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Editor/EditorUtils.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Globalization;&#10;using System.IO;&#10;using System.Linq;&#10;using System.Text;&#10;using Newtonsoft.Json;&#10;using NPOI.HSSF.UserModel;&#10;using NPOI.SS.UserModel;&#10;using NPOI.XSSF.UserModel;&#10;using UnityEditor;&#10;using UnityEngine;&#10;&#10;public class EditorUtils&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 字段信息&#10;    /// &lt;/summary&gt;&#10;    private class PropertyInfo&#10;    {&#10;        public string Name { get; set; }&#10;        public string Type { get; set; }&#10;        public string Comment { get; set; }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Excel 配置信息&#10;    /// &lt;/summary&gt;&#10;    private class ExcelConfig&#10;    {&#10;        public string ConfigName { get; set; }&#10;        public List&lt;PropertyInfo&gt; Properties { get; set; }&#10;        public ISheet Sheet { get; set; }&#10;    }&#10;&#10;    private static readonly List&lt;ExcelConfig&gt; _excelConfigs = new();&#10;    private static readonly string[] _extensions = {&quot;.xlsx&quot;, &quot;.xls&quot;};&#10;    private static readonly JsonSerializerSettings _jsonSerializerSettings = new()&#10;    {&#10;        TypeNameHandling = TypeNameHandling.Objects,&#10;        Formatting = Formatting.Indented,&#10;    };&#10;&#10;    [MenuItem(&quot;Tools/Excel To Json&quot;)]&#10;    public static void GenerateConfigs()&#10;    {&#10;        DeleteAllOldFiles();&#10;&#10;        string excelDirPath = ExcelExporterSettings.Instance.ExcelFullPath;&#10;        if (!Directory.Exists(excelDirPath)) Directory.CreateDirectory(excelDirPath);&#10;&#10;        string[] excelFiles = Directory.EnumerateFiles(excelDirPath)&#10;            .Where(file =&gt;&#10;            {&#10;                string fileName = Path.GetFileName(file);&#10;                string ext = Path.GetExtension(file);&#10;                return !fileName.StartsWith(&quot;~$&quot;) &amp;&amp;&#10;                       _extensions.Contains(ext, StringComparer.OrdinalIgnoreCase);&#10;            })&#10;            .ToArray();&#10;        if (excelFiles.Length == 0)&#10;        {&#10;            Debug.LogError(&quot;配置文件夹为空&quot;);&#10;            return;&#10;        }&#10;&#10;        foreach (string excelFile in excelFiles)&#10;        {&#10;            ReadExcel(excelFile);&#10;        }&#10;        AssetDatabase.Refresh();&#10;&#10;        EditorApplication.delayCall += () =&gt;&#10;        {&#10;            foreach (var excelConfig in _excelConfigs)&#10;            {&#10;                GenerateConfigJson(excelConfig);&#10;            }&#10;&#10;            AssetDatabase.Refresh();&#10;            _excelConfigs.Clear();&#10;            Debug.Log(&quot;主动导出完成！&quot;);&#10;        };&#10;    }&#10;&#10;    // 读取Excel&#10;    private static void ReadExcel(string excelFilePath)&#10;    {&#10;        IWorkbook wk;&#10;        string extension = Path.GetExtension(excelFilePath);&#10;        string fileName = Path.GetFileNameWithoutExtension(excelFilePath);&#10;&#10;        using var stream = new FileStream(excelFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);&#10;        if (extension.Equals(&quot;.xls&quot;))&#10;        {&#10;            wk = new HSSFWorkbook(stream);&#10;        }&#10;        else&#10;        {&#10;            wk = new XSSFWorkbook(stream);&#10;        }&#10;&#10;        for (var i = 0; i &lt; wk.NumberOfSheets; i++)&#10;        {&#10;            // 读取第i个工作表&#10;            var sheet = wk.GetSheetAt(i);&#10;            ReadExcelSheets(sheet, fileName);&#10;        }&#10;    }&#10;&#10;    private static void ReadExcelSheets(ISheet sheet, string fileName)&#10;    {&#10;        var rowComment = sheet.GetRow(0); // 字段注释&#10;        var row = sheet.GetRow(1);        // 字段名&#10;        var rowType = sheet.GetRow(2);    // 字段类型&#10;&#10;        object rowId = row.GetCell(0);&#10;        if (rowId.ToString() != &quot;id&quot;)&#10;        {&#10;            Debug.LogError($&quot;导出Configs错误！{fileName} - {sheet.SheetName}表中第一列不是id！&quot;);&#10;            return;&#10;        }&#10;&#10;        List&lt;PropertyInfo&gt; properties = new();&#10;        for (var i = 0; i &lt; row.LastCellNum; i++)&#10;        {&#10;            string comment = rowComment.GetCell(i).ToString().Trim();&#10;            string field = row.GetCell(i).ToString().Trim();&#10;            string type = rowType.GetCell(i).ToString().Trim();&#10;&#10;            if (string.IsNullOrEmpty(field) || string.IsNullOrEmpty(type)) break;&#10;&#10;            properties.Add(new PropertyInfo&#10;            {&#10;                Name = field,&#10;                Type = type,&#10;                Comment = comment&#10;            });&#10;        }&#10;&#10;        GenerateConfigClass(properties, fileName);&#10;        _excelConfigs.Add(new ExcelConfig&#10;        {&#10;            ConfigName = fileName,&#10;            Properties = properties,&#10;            Sheet = sheet&#10;        });&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 生成配置类文件&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;properties&quot;&gt;&lt;/param&gt;&#10;    /// &lt;param name=&quot;configName&quot;&gt;&lt;/param&gt;&#10;    private static void GenerateConfigClass(List&lt;PropertyInfo&gt; properties, string configName)&#10;    {&#10;        string filePath = Path.Combine(ExcelExporterSettings.Instance.CsFullPath, $&quot;{configName}Config.cs&quot;);&#10;        string fileDir = Path.GetDirectoryName(filePath);&#10;        if (string.IsNullOrEmpty(fileDir)) fileDir = Path.Combine(Application.dataPath, &quot;Scripts&quot;, &quot;Configs&quot;);&#10;        if (!Directory.Exists(fileDir)) Directory.CreateDirectory(fileDir);&#10;        if (File.Exists(filePath))&#10;        {&#10;            Debug.LogError($&quot;配置类已存在！{filePath}&quot;);&#10;            return;&#10;        }&#10;&#10;        var sb = new StringBuilder();&#10;        sb.AppendLine($&quot;public class {configName}Config : BaseConfig&quot;);&#10;        sb.AppendLine(&quot;{&quot;);&#10;        foreach (var property in properties)&#10;        {&#10;            if (property.Name == &quot;id&quot;) continue;&#10;            if (!string.IsNullOrEmpty(property.Comment))&#10;            {&#10;                sb.AppendLine(&quot;    /// &lt;summary&gt;&quot;);&#10;                sb.AppendLine($&quot;    /// {property.Comment}&quot;);&#10;                sb.AppendLine(&quot;    /// &lt;/summary&gt;&quot;);&#10;            }&#10;            sb.AppendLine($&quot;    public {property.Type} {property.Name};&quot;);&#10;        }&#10;        sb.AppendLine(&quot;}&quot;);&#10;        File.WriteAllText(filePath, sb.ToString(), Encoding.UTF8);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 生成配置JSON文件&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;excelConfig&quot;&gt;&lt;/param&gt;&#10;    private static void GenerateConfigJson(ExcelConfig excelConfig)&#10;    {&#10;        string filePath = Path.Combine(ExcelExporterSettings.Instance.JsonFullPath, $&quot;{excelConfig.ConfigName}Config.json&quot;);&#10;        string fileDir = Path.GetDirectoryName(filePath);&#10;        if (string.IsNullOrEmpty(fileDir)) fileDir = Path.Combine(Application.dataPath, &quot;Resources&quot;, &quot;JsonConfigs&quot;);&#10;        if (!Directory.Exists(fileDir)) Directory.CreateDirectory(fileDir);&#10;&#10;        Dictionary&lt;string, BaseConfig&gt; rawDataDict = new();&#10;        &#10;        for (var i = 3; i &lt;= excelConfig.Sheet.LastRowNum; i++)&#10;        {&#10;            var row = excelConfig.Sheet.GetRow(i);&#10;            if (row == null) break;&#10;&#10;            StringBuilder sb = new();&#10;            sb.Append(&quot;{&quot;);&#10;            &#10;            for (var j = 0; j &lt;= row.LastCellNum &amp;&amp; j &lt; excelConfig.Properties.Count; j++)&#10;            {&#10;                var cell = row.GetCell(j);&#10;                if (cell == null) continue;&#10;&#10;                string value;&#10;                if (cell.CellType == CellType.Formula)&#10;                {&#10;                    value = cell.CachedFormulaResultType == CellType.Numeric&#10;                        ? cell.NumericCellValue.ToString(NumberFormatInfo.CurrentInfo)&#10;                        : cell.StringCellValue.Replace(@&quot;\&quot;, @&quot;\\&quot;);&#10;                }&#10;                else&#10;                {&#10;                    value = cell.ToString().Replace(@&quot;\&quot;, @&quot;\\&quot;);&#10;                }&#10;&#10;                if (string.IsNullOrEmpty(value))&#10;                {&#10;                    if (excelConfig.Properties[j].Type != &quot;string&quot; &amp;&amp; excelConfig.Properties[j].Type != &quot;string[]&quot;)&#10;                    {&#10;                        value = &quot;0&quot;;&#10;                    }&#10;                    Debug.LogWarning($&quot;有空值！{excelConfig.ConfigName} - {excelConfig.Sheet.SheetName}表中第{i + 1}行第{j + 1}列（字段名：{excelConfig.Properties[j].Name}）的值为空！&quot;);&#10;                }&#10;&#10;                if (excelConfig.Properties[j].Type == &quot;bool&quot;)&#10;                {&#10;                    // 布尔类型&#10;                    if (value.ToLower() != &quot;true&quot; &amp;&amp; value.ToLower() != &quot;false&quot;)&#10;                    {&#10;                        value = value == &quot;0&quot; ? &quot;false&quot; : &quot;true&quot;;&#10;                    }&#10;                    else&#10;                    {&#10;                        value = value.ToLower(); // &quot;TRUE&quot; -&gt; &quot;true&quot;, &quot;FALSE&quot; -&gt; &quot;false&quot;&#10;                    }&#10;                }&#10;&#10;                if (excelConfig.Properties[j].Type.Contains(&quot;[]&quot;))&#10;                {&#10;                    // 处理数组类型（支持数字数组和字符串数组）&#10;                    if (excelConfig.Properties[j].Type == &quot;string[]&quot;)&#10;                    {&#10;                        // 使用 ParseCsvStyleArray 解析复杂字符串&#10;                        var parsedValues = ParseCsvStyleArray(value);&#10;                        var escapedValues = parsedValues&#10;                            .Select(s =&gt; $&quot;\&quot;{s.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)}\&quot;&quot;); // 转义双引号&#10;&#10;                        value = $&quot;[{string.Join(&quot;,&quot;, escapedValues.ToArray())}]&quot;;&#10;                    }&#10;                    else&#10;                    {&#10;                        // 其他数组（如 int[]、float[]）&#10;                        value = $&quot;[{value}]&quot;;&#10;                    }&#10;                }&#10;                else&#10;                {&#10;                    // 字符串类型&#10;                    value = value.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;); // 转义双引号&#10;                    value = $&quot;\&quot;{value}\&quot;&quot;;&#10;                }&#10;&#10;                sb.Append($&quot;\&quot;{excelConfig.Properties[j].Name}\&quot;:{value}&quot;);&#10;                if (j &lt; row.LastCellNum - 1) sb.Append(&quot;,&quot;);&#10;            }&#10;            sb.Append(&quot;}&quot;);&#10;&#10;            var type = Type.GetType($&quot;{excelConfig.ConfigName}Config, Assembly-CSharp&quot;);&#10;            if (type == null)&#10;            {&#10;                Debug.LogError($&quot;找不到类型: {excelConfig.ConfigName}Config，可能没有编译完成&quot;);&#10;                continue;&#10;            }&#10;&#10;            try&#10;            {&#10;                if (JsonConvert.DeserializeObject(sb.ToString(), type) is not BaseConfig config || string.IsNullOrEmpty(config.id)) continue;&#10;                rawDataDict.Add(config.id, config);&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                Debug.LogError($&quot;解析错误: {ex}&quot;);&#10;                break;&#10;            }&#10;        }&#10;&#10;        string json = JsonConvert.SerializeObject(rawDataDict, _jsonSerializerSettings);&#10;        File.WriteAllText(filePath, json, Encoding.UTF8);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 解析类似 CSV 的字符串数组（支持引号包裹的逗号）&#10;    /// &lt;/summary&gt;&#10;    private static List&lt;string&gt; ParseCsvStyleArray(string input)&#10;    {&#10;        if (string.IsNullOrEmpty(input)) return new List&lt;string&gt;();&#10;&#10;        var result = new List&lt;string&gt;();&#10;        var inQuotes = false;&#10;        var currentItem = new StringBuilder();&#10;&#10;        for (int i = 0; i &lt; input.Length; i++)&#10;        {&#10;            char c = input[i];&#10;&#10;            if (c == '&quot;')&#10;            {&#10;                // 检查是否是转义的引号（如 `&quot;&quot;`）&#10;                if (i + 1 &lt; input.Length &amp;&amp; input[i + 1] == '&quot;')&#10;                {&#10;                    currentItem.Append('&quot;');&#10;                    i++; // 跳过下一个引号&#10;                }&#10;                else&#10;                {&#10;                    // 保留引号并切换状态&#10;                    currentItem.Append('&quot;');&#10;                    inQuotes = !inQuotes; // 进入/退出引号模式&#10;                }&#10;            }&#10;            else if (c == ',' &amp;&amp; !inQuotes)&#10;            {&#10;                // 遇到逗号且不在引号内，分割当前元素&#10;                result.Add(currentItem.ToString().Trim());&#10;                currentItem.Clear();&#10;            }&#10;            else&#10;            {&#10;                currentItem.Append(c);&#10;            }&#10;        }&#10;&#10;        // 添加最后一个元素&#10;        if (currentItem.Length &gt; 0)&#10;        {&#10;            result.Add(currentItem.ToString().Trim());&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 删除所有旧文件&#10;    /// &lt;/summary&gt;&#10;    private static void DeleteAllOldFiles()&#10;    {&#10;        var settings = ExcelExporterSettings.Instance;&#10;&#10;        if (Directory.Exists(settings.CsFullPath)) Directory.Delete(settings.CsFullPath, true);&#10;        if (Directory.Exists(settings.JsonFullPath)) Directory.Delete(settings.JsonFullPath, true);&#10;        Directory.CreateDirectory(settings.CsFullPath);&#10;        Directory.CreateDirectory(settings.JsonFullPath);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Globalization;&#10;using System.IO;&#10;using System.Linq;&#10;using System.Text;&#10;using Newtonsoft.Json;&#10;using NPOI.HSSF.UserModel;&#10;using NPOI.SS.UserModel;&#10;using NPOI.XSSF.UserModel;&#10;using UnityEditor;&#10;using UnityEngine;&#10;&#10;public class EditorUtils&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 字段信息&#10;    /// &lt;/summary&gt;&#10;    private class PropertyInfo&#10;    {&#10;        public string Name { get; set; }&#10;        public string Type { get; set; }&#10;        public string Comment { get; set; }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Excel 配置信息&#10;    /// &lt;/summary&gt;&#10;    private class ExcelConfig&#10;    {&#10;        public string ConfigName { get; set; }&#10;        public List&lt;PropertyInfo&gt; Properties { get; set; }&#10;        public ISheet Sheet { get; set; }&#10;    }&#10;&#10;    private static readonly List&lt;ExcelConfig&gt; _excelConfigs = new();&#10;    private static readonly string[] _extensions = {&quot;.xlsx&quot;, &quot;.xls&quot;};&#10;    private static readonly JsonSerializerSettings _jsonSerializerSettings = new()&#10;    {&#10;        TypeNameHandling = TypeNameHandling.Objects,&#10;        Formatting = Formatting.Indented,&#10;    };&#10;&#10;    [MenuItem(&quot;Tools/Excel To Json&quot;)]&#10;    public static void GenerateConfigs()&#10;    {&#10;        DeleteAllOldFiles();&#10;&#10;        string excelDirPath = ExcelExporterSettings.Instance.ExcelFullPath;&#10;        if (!Directory.Exists(excelDirPath)) Directory.CreateDirectory(excelDirPath);&#10;&#10;        string[] excelFiles = Directory.EnumerateFiles(excelDirPath)&#10;            .Where(file =&gt;&#10;            {&#10;                string fileName = Path.GetFileName(file);&#10;                string ext = Path.GetExtension(file);&#10;                return !fileName.StartsWith(&quot;~$&quot;) &amp;&amp;&#10;                       _extensions.Contains(ext, StringComparer.OrdinalIgnoreCase);&#10;            })&#10;            .ToArray();&#10;        if (excelFiles.Length == 0)&#10;        {&#10;            Debug.LogError(&quot;配置文件夹为空&quot;);&#10;            return;&#10;        }&#10;&#10;        foreach (string excelFile in excelFiles)&#10;        {&#10;            ReadExcel(excelFile);&#10;        }&#10;        AssetDatabase.Refresh();&#10;&#10;        EditorApplication.delayCall += () =&gt;&#10;        {&#10;            foreach (var excelConfig in _excelConfigs)&#10;            {&#10;                GenerateConfigJson(excelConfig);&#10;            }&#10;&#10;            AssetDatabase.Refresh();&#10;            _excelConfigs.Clear();&#10;            Debug.Log(&quot;主动导出完成！&quot;);&#10;        };&#10;    }&#10;&#10;    // 读取Excel&#10;    private static void ReadExcel(string excelFilePath)&#10;    {&#10;        IWorkbook wk;&#10;        string extension = Path.GetExtension(excelFilePath);&#10;        string fileName = Path.GetFileNameWithoutExtension(excelFilePath);&#10;&#10;        using var stream = new FileStream(excelFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);&#10;        if (extension.Equals(&quot;.xls&quot;))&#10;        {&#10;            wk = new HSSFWorkbook(stream);&#10;        }&#10;        else&#10;        {&#10;            wk = new XSSFWorkbook(stream);&#10;        }&#10;&#10;        for (var i = 0; i &lt; wk.NumberOfSheets; i++)&#10;        {&#10;            // 读取第i个工作表&#10;            var sheet = wk.GetSheetAt(i);&#10;            ReadExcelSheets(sheet, fileName);&#10;        }&#10;    }&#10;&#10;    private static void ReadExcelSheets(ISheet sheet, string fileName)&#10;    {&#10;        var rowComment = sheet.GetRow(0); // 字段注释&#10;        var row = sheet.GetRow(1);        // 字段名&#10;        var rowType = sheet.GetRow(2);    // 字段类型&#10;&#10;        object rowId = row.GetCell(0);&#10;        if (rowId.ToString() != &quot;id&quot;)&#10;        {&#10;            Debug.LogError($&quot;导出Configs错误！{fileName} - {sheet.SheetName}表中第一列不是id！&quot;);&#10;            return;&#10;        }&#10;&#10;        List&lt;PropertyInfo&gt; properties = new();&#10;        for (var i = 0; i &lt; row.LastCellNum; i++)&#10;        {&#10;            string comment = rowComment.GetCell(i).ToString().Trim();&#10;            string field = row.GetCell(i).ToString().Trim();&#10;            string type = rowType.GetCell(i).ToString().Trim();&#10;&#10;            if (string.IsNullOrEmpty(field) || string.IsNullOrEmpty(type)) break;&#10;&#10;            properties.Add(new PropertyInfo&#10;            {&#10;                Name = field,&#10;                Type = type,&#10;                Comment = comment&#10;            });&#10;        }&#10;&#10;        GenerateConfigClass(properties, fileName);&#10;        _excelConfigs.Add(new ExcelConfig&#10;        {&#10;            ConfigName = fileName,&#10;            Properties = properties,&#10;            Sheet = sheet&#10;        });&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 生成配置类文件&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;properties&quot;&gt;&lt;/param&gt;&#10;    /// &lt;param name=&quot;configName&quot;&gt;&lt;/param&gt;&#10;    private static void GenerateConfigClass(List&lt;PropertyInfo&gt; properties, string configName)&#10;    {&#10;        string filePath = Path.Combine(ExcelExporterSettings.Instance.CsFullPath, $&quot;{configName}Config.cs&quot;);&#10;        string fileDir = Path.GetDirectoryName(filePath);&#10;        if (string.IsNullOrEmpty(fileDir)) fileDir = Path.Combine(Application.dataPath, &quot;Scripts&quot;, &quot;Configs&quot;);&#10;        if (!Directory.Exists(fileDir)) Directory.CreateDirectory(fileDir);&#10;        if (File.Exists(filePath))&#10;        {&#10;            Debug.LogError($&quot;配置类已存在！{filePath}&quot;);&#10;            return;&#10;        }&#10;&#10;        var sb = new StringBuilder();&#10;        sb.AppendLine($&quot;public class {configName}Config : BaseConfig&quot;);&#10;        sb.AppendLine(&quot;{&quot;);&#10;        foreach (var property in properties)&#10;        {&#10;            if (property.Name == &quot;id&quot;) continue;&#10;            if (!string.IsNullOrEmpty(property.Comment))&#10;            {&#10;                sb.AppendLine(&quot;    /// &lt;summary&gt;&quot;);&#10;                sb.AppendLine($&quot;    /// {property.Comment}&quot;);&#10;                sb.AppendLine(&quot;    /// &lt;/summary&gt;&quot;);&#10;            }&#10;            sb.AppendLine($&quot;    public {property.Type} {property.Name};&quot;);&#10;        }&#10;        sb.AppendLine(&quot;}&quot;);&#10;        File.WriteAllText(filePath, sb.ToString(), Encoding.UTF8);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 生成配置JSON文件&#10;    /// &lt;/summary&gt;&#10;    /// &lt;param name=&quot;excelConfig&quot;&gt;&lt;/param&gt;&#10;    private static void GenerateConfigJson(ExcelConfig excelConfig)&#10;    {&#10;        string filePath = Path.Combine(ExcelExporterSettings.Instance.JsonFullPath, $&quot;{excelConfig.ConfigName}Config.json&quot;);&#10;        string fileDir = Path.GetDirectoryName(filePath);&#10;        if (string.IsNullOrEmpty(fileDir)) fileDir = Path.Combine(Application.dataPath, &quot;Resources&quot;, &quot;JsonConfigs&quot;);&#10;        if (!Directory.Exists(fileDir)) Directory.CreateDirectory(fileDir);&#10;&#10;        Dictionary&lt;string, BaseConfig&gt; rawDataDict = new();&#10;        &#10;        for (var i = 3; i &lt;= excelConfig.Sheet.LastRowNum; i++)&#10;        {&#10;            var row = excelConfig.Sheet.GetRow(i);&#10;            if (row == null) break;&#10;&#10;            StringBuilder sb = new();&#10;            sb.Append(&quot;{&quot;);&#10;            &#10;            for (var j = 0; j &lt;= row.LastCellNum &amp;&amp; j &lt; excelConfig.Properties.Count; j++)&#10;            {&#10;                var cell = row.GetCell(j);&#10;                if (cell == null) continue;&#10;&#10;                string value;&#10;                if (cell.CellType == CellType.Formula)&#10;                {&#10;                    value = cell.CachedFormulaResultType == CellType.Numeric&#10;                        ? cell.NumericCellValue.ToString(NumberFormatInfo.CurrentInfo)&#10;                        : cell.StringCellValue.Replace(@&quot;\&quot;, @&quot;\\&quot;);&#10;                }&#10;                else&#10;                {&#10;                    value = cell.ToString().Replace(@&quot;\&quot;, @&quot;\\&quot;);&#10;                }&#10;&#10;                if (string.IsNullOrEmpty(value))&#10;                {&#10;                    if (excelConfig.Properties[j].Type != &quot;string&quot; &amp;&amp; excelConfig.Properties[j].Type != &quot;string[]&quot;)&#10;                    {&#10;                        value = &quot;0&quot;;&#10;                    }&#10;                    Debug.LogWarning($&quot;有空值！{excelConfig.ConfigName} - {excelConfig.Sheet.SheetName}表中第{i + 1}行第{j + 1}列（字段名：{excelConfig.Properties[j].Name}）的值为空！&quot;);&#10;                }&#10;&#10;                if (excelConfig.Properties[j].Type == &quot;bool&quot;)&#10;                {&#10;                    // 布尔类型&#10;                    if (value.ToLower() != &quot;true&quot; &amp;&amp; value.ToLower() != &quot;false&quot;)&#10;                    {&#10;                        value = value == &quot;0&quot; ? &quot;false&quot; : &quot;true&quot;;&#10;                    }&#10;                    else&#10;                    {&#10;                        value = value.ToLower(); // &quot;TRUE&quot; -&gt; &quot;true&quot;, &quot;FALSE&quot; -&gt; &quot;false&quot;&#10;                    }&#10;                }&#10;&#10;                if (excelConfig.Properties[j].Type.Contains(&quot;[]&quot;))&#10;                {&#10;                    // 处理数组类型（支持数字数组和字符串数组）&#10;                    if (excelConfig.Properties[j].Type == &quot;string[]&quot;)&#10;                    {&#10;                        // 使用 ParseCsvStyleArray 解析复杂字符串&#10;                        var parsedValues = ParseCsvStyleArray(value);&#10;                        var escapedValues = parsedValues&#10;                            .Select(s =&gt; $&quot;\&quot;{s.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)}\&quot;&quot;); // 转义双引号&#10;&#10;                        value = $&quot;[{string.Join(&quot;,&quot;, escapedValues.ToArray())}]&quot;;&#10;                    }&#10;                    else&#10;                    {&#10;                        // 其他数组（如 int[]、float[]）&#10;                        value = $&quot;[{value}]&quot;;&#10;                    }&#10;                }&#10;                else&#10;                {&#10;                    // 字符串类型&#10;                    value = value.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;); // 转义双引号&#10;                    value = $&quot;\&quot;{value}\&quot;&quot;;&#10;                }&#10;&#10;                sb.Append($&quot;\&quot;{excelConfig.Properties[j].Name}\&quot;:{value}&quot;);&#10;                if (j &lt; row.LastCellNum - 1) sb.Append(&quot;,&quot;);&#10;            }&#10;            sb.Append(&quot;}&quot;);&#10;&#10;            var type = Type.GetType($&quot;{excelConfig.ConfigName}Config, Assembly-CSharp&quot;);&#10;            if (type == null)&#10;            {&#10;                Debug.LogError($&quot;找不到类型: {excelConfig.ConfigName}Config，可能没有编译完成&quot;);&#10;                continue;&#10;            }&#10;&#10;            try&#10;            {&#10;                if (JsonConvert.DeserializeObject(sb.ToString(), type) is not BaseConfig config || string.IsNullOrEmpty(config.id)) continue;&#10;                rawDataDict.Add(config.id, config);&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                Debug.LogError($&quot;解析错误: {ex}&quot;);&#10;                break;&#10;            }&#10;        }&#10;&#10;        string json = JsonConvert.SerializeObject(rawDataDict, _jsonSerializerSettings);&#10;        File.WriteAllText(filePath, json, Encoding.UTF8);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 解析类似 CSV 的字符串数组（支持引号包裹的逗号）&#10;    /// &lt;/summary&gt;&#10;    private static List&lt;string&gt; ParseCsvStyleArray(string input)&#10;    {&#10;        if (string.IsNullOrEmpty(input)) return new List&lt;string&gt;();&#10;&#10;        var result = new List&lt;string&gt;();&#10;        var inQuotes = false;&#10;        var currentItem = new StringBuilder();&#10;&#10;        for (int i = 0; i &lt; input.Length; i++)&#10;        {&#10;            char c = input[i];&#10;&#10;            if (c == '&quot;')&#10;            {&#10;                // 检查是否是转义的引号（如 `&quot;&quot;`）&#10;                if (i + 1 &lt; input.Length &amp;&amp; input[i + 1] == '&quot;')&#10;                {&#10;                    currentItem.Append('&quot;');&#10;                    i++; // 跳过下一个引号&#10;                }&#10;                else&#10;                {&#10;                    // 保留引号并切换状态&#10;                    currentItem.Append('&quot;');&#10;                    inQuotes = !inQuotes; // 进入/退出引号模式&#10;                }&#10;            }&#10;            else if (c == ',' &amp;&amp; !inQuotes)&#10;            {&#10;                // 遇到逗号且不在引号内，分割当前元素&#10;                result.Add(currentItem.ToString().Trim());&#10;                currentItem.Clear();&#10;            }&#10;            else&#10;            {&#10;                currentItem.Append(c);&#10;            }&#10;        }&#10;&#10;        // 添加最后一个元素&#10;        if (currentItem.Length &gt; 0)&#10;        {&#10;            result.Add(currentItem.ToString().Trim());&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 删除所有旧文件&#10;    /// &lt;/summary&gt;&#10;    private static void DeleteAllOldFiles()&#10;    {&#10;        var settings = ExcelExporterSettings.Instance;&#10;&#10;        if (Directory.Exists(settings.CsFullPath)) Directory.Delete(settings.CsFullPath, true);&#10;        if (Directory.Exists(settings.JsonFullPath)) Directory.Delete(settings.JsonFullPath, true);&#10;        Directory.CreateDirectory(settings.CsFullPath);&#10;        Directory.CreateDirectory(settings.JsonFullPath);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>